using System;
using Dapper;
using Npgsql;
using System.Data;


namespace Models
{
    public class Database
    {
        //private DbSettings _dbSettings;

        //public Database(IOptions<DbSettings> dbSettings)
        //{
        //    _dbSettings = dbSettings.Value;
        //}
        //public IDbConnection CreateConnection()
        //{
        //    var connectionString = $"Host={_dbSettings.Server}; Database={_dbSettings.Database}; Username={_dbSettings.UserId}; Password={_dbSettings.Password};";
        //    return new NpgsqlConnection(connectionString);
        //}
        public void Init(IDbConnection connection)
        {
             _initDatabase();
             _initTables(connection);
        }

        private void _initDatabase()
        {
            var _dbSettings = new DbSettings();
            _dbSettings.Database = "Reports";
            _dbSettings.Server="localhost";
            _dbSettings.UserId = "postgres";
            _dbSettings.Password = "postgres"; 
            // create database if it doesn't exist
            var connectionString = $"Host={_dbSettings.Server}; Database=postgres; Username={_dbSettings.UserId}; Password={_dbSettings.Password};"; 
            var connection = new NpgsqlConnection(connectionString);
            var sqlDbCount = $"SELECT COUNT(*) FROM pg_database WHERE datname = '{_dbSettings.Database}';";
            var dbCount =  connection.ExecuteScalar<int>(sqlDbCount);
            if (dbCount == 0)
            {
                var sql = $"CREATE DATABASE \"{_dbSettings.Database}\"";
                connection.Execute(sql);
                Console.WriteLine("Database Reports created.");
            }
            else
            {
                Console.WriteLine("Database Reports existed.");
            }
        }
        private void _initTables(IDbConnection connection)
        {
            // create tables if they don't exist
            
             _initReportDefinitions();
             _initHistPoints();
             _initHistorians();
           void _initReportDefinitions()
            {
                try
                {
                    var sql = "CREATE TABLE IF NOT EXISTS reportdefinitions (reportdefinitionid integer NOT NULL GENERATED BY DEFAULT AS IDENTITY, " +
                              "reportname text, reporttypeid integer, reportdestid integer, destinationinfo text, " +
                              "arhive boolean, header2 text, timeformatid integer, timeperiodinfo text, " +
                              "sampletimeformatid integer, sampletimeperiodinfo text, additionalparams text, " +
                              "unit integer, shift text, nextevent timestamp without time zone, " +
                              "lastused timestamp without time zone, enable boolean, " +
                              "CONSTRAINT pk_reportdefinitions PRIMARY KEY (reportdefinitionid))";
                    connection.Execute(sql);
                    Console.WriteLine("Table ReportDefinitions created.");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

            }
           void _initHistPoints()
            {
                try
                {
                    var sql = "CREATE TABLE IF NOT EXISTS histpoints (histpointid integer NOT NULL  GENERATED BY DEFAULT AS IDENTITY, pointposn integer, " +
                              "pointname text, bitnumber integer, proctype integer, integconst text, " +
                              "reportdefinitionid integer NOT NULL, description text, " +
                              "format text, CONSTRAINT pk_histpoints PRIMARY KEY(histpointid))";
                    var c= connection.Execute(sql);
                    Console.WriteLine("Table HistPoints created.");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    throw;
                }

            }
            void _initHistorians()
            {
                try
                {
                    var sql = "CREATE TABLE IF NOT EXISTS historians (historianid integer NOT NULL  GENERATED BY DEFAULT AS IDENTITY, " +
                              "ip text, unit integer, unitnet text, CONSTRAINT pk_historians PRIMARY KEY(historianid))";
                    connection.Execute(sql);
                    Console.WriteLine("Table Historians created.");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    throw;
                }
   
            }

        }

    }

    public class DbSettings
    {
        public string Server { get; set; }
        public int Port { get; set; }
        public string Database { get; set; }
        public string UserId { get; set; }
        public string Password { get; set; }
    }
}
